name: IOR NetCDF-4 Serial Benchmark

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run daily at 7 AM UTC (1 hour after parallel version)
    - cron: '0 7 * * *'
  workflow_dispatch:

jobs:
  benchmark-netcdf4-serial:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip build-essential cmake \
          zlib1g-dev libcurl4-openssl-dev \
          autotools-dev autoconf automake libtool \
          pkg-config

    - name: Install Python dependencies
      run: |
        pip3 install numpy matplotlib pandas

    - name: Checkout HDF5
      uses: actions/checkout@v4
      with:
        repository: HDFGroup/hdf5
        ref: develop
        path: hdf5

    - name: Get HDF5 commit hash
      id: hdf5-hash
      run: |
        cd hdf5
        HDF5_HASH=$(git rev-parse HEAD)
        echo "hash=$HDF5_HASH" >> $GITHUB_OUTPUT
        echo "HDF5 commit hash: $HDF5_HASH"

    - name: Check previous HDF5 hash
      id: check-hash
      run: |
        # Try to get the previous hash from gh-pages branch
        PREV_HASH=""
        if git ls-remote --heads origin gh-pages >/dev/null 2>&1; then
          # Clone gh-pages branch to get previous hash
          git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages-temp || true
          if [ -f gh-pages-temp/hdf5-hash-serial.txt ]; then
            PREV_HASH=$(cat gh-pages-temp/hdf5-hash-serial.txt)
          fi
          rm -rf gh-pages-temp
        fi

        echo "Previous HDF5 hash: ${PREV_HASH:-none}"
        echo "Current HDF5 hash: ${{ steps.hdf5-hash.outputs.hash }}"

        if [ "$PREV_HASH" = "${{ steps.hdf5-hash.outputs.hash }}" ] && [ "${{ github.event_name }}" = "schedule" ]; then
          echo "skip_tests=true" >> $GITHUB_OUTPUT
          echo "No HDF5 changes detected, skipping tests for scheduled run"
        else
          echo "skip_tests=false" >> $GITHUB_OUTPUT
          echo "HDF5 changed or manual trigger, running tests"
        fi

    - name: Cache HDF5 build
      id: cache-hdf5
      uses: actions/cache@v4
      with:
        path: ~/hdf5-install-serial
        key: hdf5-serial-${{ steps.hdf5-hash.outputs.hash }}-zlib-${{ runner.os }}

    - name: Build HDF5
      if: steps.cache-hdf5.outputs.cache-hit != 'true' && steps.check-hash.outputs.skip_tests != 'true'
      run: |
        cd hdf5
        mkdir build
        cd build
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=$HOME/hdf5-install-serial \
          -DCMAKE_BUILD_TYPE=Release \
          -DHDF5_ENABLE_PARALLEL=OFF \
          -DHDF5_ENABLE_ZLIB_SUPPORT=ON \
          -DHDF5_BUILD_TOOLS=OFF \
          -DHDF5_BUILD_EXAMPLES=OFF \
          -DHDF5_BUILD_TESTS=OFF
        make -j$(nproc)
        make install

    - name: Checkout netCDF-C
      if: steps.check-hash.outputs.skip_tests != 'true'
      uses: actions/checkout@v4
      with:
        repository: Unidata/netcdf-c
        ref: main
        path: netcdf-c

    - name: Cache netCDF-4 build
      id: cache-netcdf4
      uses: actions/cache@v4
      with:
        path: ~/netcdf4-install-serial
        key: netcdf4-serial-${{ steps.hdf5-hash.outputs.hash }}-${{ runner.os }}

    - name: Build netCDF-4
      if: steps.cache-netcdf4.outputs.cache-hit != 'true' && steps.check-hash.outputs.skip_tests != 'true'
      run: |
        cd netcdf-c
        export HDF5_DIR=$HOME/hdf5-install-serial
        export LD_LIBRARY_PATH="$HOME/hdf5-install-serial/lib:$LD_LIBRARY_PATH"
        export PKG_CONFIG_PATH="$HOME/hdf5-install-serial/lib/pkgconfig:$PKG_CONFIG_PATH"

        mkdir build
        cd build
        cmake .. \
          -DCMAKE_INSTALL_PREFIX=$HOME/netcdf4-install-serial \
          -DCMAKE_BUILD_TYPE=Release \
          -DENABLE_NETCDF_4=ON \
          -DENABLE_PARALLEL=OFF \
          -DENABLE_PARALLEL_TESTS=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DENABLE_DAP=OFF \
          -DENABLE_LIBXML2=OFF \
          -DENABLE_NCZARR=OFF \
          -DHDF5_DIR=$HOME/hdf5-install-serial \
          -DHDF5_ROOT=$HOME/hdf5-install-serial

        make -j$(nproc)
        make install

    - name: Bootstrap IOR
      if: steps.check-hash.outputs.skip_tests != 'true'
      run: |
        if [ ! -f configure ]; then
          ./bootstrap
        fi

    - name: Configure IOR
      if: steps.check-hash.outputs.skip_tests != 'true'
      run: |
        export HDF5_DIR=$HOME/hdf5-install-serial
        export NETCDF_DIR=$HOME/netcdf4-install-serial
        export CPPFLAGS="-I$HOME/hdf5-install-serial/include -I$HOME/netcdf4-install-serial/include"
        export LDFLAGS="-L$HOME/hdf5-install-serial/lib -L$HOME/netcdf4-install-serial/lib"
        export LD_LIBRARY_PATH="$HOME/hdf5-install-serial/lib:$HOME/netcdf4-install-serial/lib:$LD_LIBRARY_PATH"
        export PKG_CONFIG_PATH="$HOME/hdf5-install-serial/lib/pkgconfig:$HOME/netcdf4-install-serial/lib/pkgconfig:$PKG_CONFIG_PATH"

        ./configure \
          --with-hdf5

    - name: Build IOR
      if: steps.check-hash.outputs.skip_tests != 'true'
      run: |
        export LD_LIBRARY_PATH="$HOME/hdf5-install-serial/lib:$HOME/netcdf4-install-serial/lib:$LD_LIBRARY_PATH"
        make -j$(nproc)

    - name: Create benchmark script
      if: steps.check-hash.outputs.skip_tests != 'true'
      run: |
        cat > benchmark_script.sh << 'EOF'
        #!/bin/bash
        set -e

        export HDF5_DIR=$HOME/hdf5-install-serial
        export NETCDF_DIR=$HOME/netcdf4-install-serial
        export LD_LIBRARY_PATH="$HOME/hdf5-install-serial/lib:$HOME/netcdf4-install-serial/lib:$LD_LIBRARY_PATH"

        # Create test directory
        mkdir -p benchmark_results
        cd benchmark_results

        echo "=== IOR NetCDF-4 Serial Benchmark Results ===" | tee benchmark_output.txt
        echo "Timestamp: $(date)" | tee -a benchmark_output.txt
        echo "HDF5 Version: $(strings $HOME/hdf5-install-serial/lib/libhdf5.so | grep "HDF5 library version" | head -1)" | tee -a benchmark_output.txt
        echo "Mode: Serial (non-parallel)" | tee -a benchmark_output.txt
        echo "" | tee -a benchmark_output.txt

        # Test 1: Small file test (1MB)
        echo "=== Test 1: Small File Test (1MB) ===" | tee -a benchmark_output.txt
        ../src/ior -a NCMPI -t 1m -b 1m -s 1 -o test1.nc -e | tee -a benchmark_output.txt
        echo "" | tee -a benchmark_output.txt

        # Test 2: Medium file test (10MB)
        echo "=== Test 2: Medium File Test (10MB) ===" | tee -a benchmark_output.txt
        ../src/ior -a NCMPI -t 1m -b 10m -s 1 -o test2.nc -e | tee -a benchmark_output.txt
        echo "" | tee -a benchmark_output.txt

        # Test 3: Large file test (50MB)
        echo "=== Test 3: Large File Test (50MB) ===" | tee -a benchmark_output.txt
        ../src/ior -a NCMPI -t 1m -b 50m -s 1 -o test3.nc -e | tee -a benchmark_output.txt
        echo "" | tee -a benchmark_output.txt

        # Test 4: HDF5 backend comparison
        echo "=== Test 4: HDF5 Backend Test (for comparison) ===" | tee -a benchmark_output.txt
        ../src/ior -a HDF5 -t 1m -b 25m -s 1 -o test4.h5 -e | tee -a benchmark_output.txt
        echo "" | tee -a benchmark_output.txt

        # Test 5: Multiple segments test
        echo "=== Test 5: Multiple Segments Test (5x5MB) ===" | tee -a benchmark_output.txt
        ../src/ior -a NCMPI -t 1m -b 5m -s 5 -o test5.nc -e | tee -a benchmark_output.txt
        echo "" | tee -a benchmark_output.txt

        echo "=== Serial benchmark completed ===" | tee -a benchmark_output.txt
        EOF

        chmod +x benchmark_script.sh

    - name: Run benchmarks
      if: steps.check-hash.outputs.skip_tests != 'true'
      run: ./benchmark_script.sh

    - name: Parse benchmark results
      if: steps.check-hash.outputs.skip_tests != 'true'
      run: |
        python3 scripts/parse_ior_benchmark.py benchmark_results/benchmark_output.txt benchmark-results-serial.json --verbose

    - name: Store benchmark result
      if: steps.check-hash.outputs.skip_tests != 'true'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: IOR NetCDF-4 Serial Performance
        tool: 'customBiggerIsBetter'
        output-file-path: benchmark-results-serial.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        gh-pages-branch: gh-pages
        benchmark-data-dir-path: dev/bench-serial

    - name: Update HDF5 hash file
      if: steps.check-hash.outputs.skip_tests != 'true'
      run: |
        # Clone gh-pages to update hash file
        git clone --single-branch --branch gh-pages https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages-update || git clone --orphan gh-pages gh-pages-update
        cd gh-pages-update
        echo "${{ steps.hdf5-hash.outputs.hash }}" > hdf5-hash-serial.txt
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add hdf5-hash-serial.txt
        git commit -m "update: HDF5 serial commit hash to ${{ steps.hdf5-hash.outputs.hash }}" || echo "No changes to commit"
        git push origin gh-pages || git push -u origin gh-pages

    - name: Skip message
      if: steps.check-hash.outputs.skip_tests == 'true'
      run: |
        echo "⏭️ Skipping tests - no HDF5 changes detected since last run"
        echo "Previous HDF5 hash matches current hash: ${{ steps.hdf5-hash.outputs.hash }}"

    - name: Upload benchmark artifacts
      uses: actions/upload-artifact@v4
      if: steps.check-hash.outputs.skip_tests != 'true'
      with:
        name: benchmark-results-serial
        path: |
          benchmark_results/benchmark_output.txt
          benchmark-results-serial.json
          benchmark_results/*.nc
          benchmark_results/*.h5
